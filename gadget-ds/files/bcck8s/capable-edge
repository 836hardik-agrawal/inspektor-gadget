#!/usr/bin/python
# @lint-avoid-python-3-compatibility-imports
#
# capable   Trace security capabilitiy checks (cap_capable()).
#           For Linux, uses BCC, eBPF. Embedded C.
#
# USAGE: capable [-h] [-v] [-p PID] [-K] [-U]
#
# Copyright 2016 Netflix, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")
#
# 13-Sep-2016   Brendan Gregg   Created this.

from __future__ import print_function
from functools import partial
from bcc import BPF
import errno
import argparse
from time import strftime
import os
import sys
import fcntl

# arguments
examples = """examples:
    ./capable              # trace capability checks
    ./capable -p 181       # only trace PID 181
    ./capable -l app=web   # only trace pods with this label
    ./capable -s namespace # only trace pods in this namespace
    ./capable -m podname   # only trace pods with this name
    ./capable -K           # add kernel stacks to trace
    ./capable -U           # add user-space stacks to trace
"""
parser = argparse.ArgumentParser(
    description="Trace security capability checks",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=examples)
parser.add_argument("-p", "--pid",
    help="trace this PID only")
parser.add_argument("-l", "--label",
    help="trace pods with this label only")
parser.add_argument("-s", "--namespace",
    help="trace pods with in this namespace only")
parser.add_argument("-m", "--podname",
    help="trace pods with this name only")
parser.add_argument("-K", "--kernel-stack", action="store_true",
    help="output kernel stack trace")
parser.add_argument("-U", "--user-stack", action="store_true",
    help="output user stack trace")
args = parser.parse_args()
debug = 0

# capabilities to names, generated from (and will need updating):
# awk '/^#define.CAP_.*[0-9]$/ { print "    " $3 ": \"" $2 "\"," }' \
#     include/uapi/linux/capability.h
capabilities = {
    0: "CAP_CHOWN",
    1: "CAP_DAC_OVERRIDE",
    2: "CAP_DAC_READ_SEARCH",
    3: "CAP_FOWNER",
    4: "CAP_FSETID",
    5: "CAP_KILL",
    6: "CAP_SETGID",
    7: "CAP_SETUID",
    8: "CAP_SETPCAP",
    9: "CAP_LINUX_IMMUTABLE",
    10: "CAP_NET_BIND_SERVICE",
    11: "CAP_NET_BROADCAST",
    12: "CAP_NET_ADMIN",
    13: "CAP_NET_RAW",
    14: "CAP_IPC_LOCK",
    15: "CAP_IPC_OWNER",
    16: "CAP_SYS_MODULE",
    17: "CAP_SYS_RAWIO",
    18: "CAP_SYS_CHROOT",
    19: "CAP_SYS_PTRACE",
    20: "CAP_SYS_PACCT",
    21: "CAP_SYS_ADMIN",
    22: "CAP_SYS_BOOT",
    23: "CAP_SYS_NICE",
    24: "CAP_SYS_RESOURCE",
    25: "CAP_SYS_TIME",
    26: "CAP_SYS_TTY_CONFIG",
    27: "CAP_MKNOD",
    28: "CAP_LEASE",
    29: "CAP_AUDIT_WRITE",
    30: "CAP_AUDIT_CONTROL",
    31: "CAP_SETFCAP",
    32: "CAP_MAC_OVERRIDE",
    33: "CAP_MAC_ADMIN",
    34: "CAP_SYSLOG",
    35: "CAP_WAKE_ALARM",
    36: "CAP_BLOCK_SUSPEND",
    37: "CAP_AUDIT_READ",
}

class Enum(set):
    def __getattr__(self, name):
        if name in self:
            return name
        raise AttributeError

# Stack trace types
StackType = Enum(("Kernel", "User",))

# define BPF program
bpf_text = """
#include <uapi/linux/ptrace.h>
#include <linux/sched.h>

#define DEBUG_PRINT 0

struct data_t {
   u32 tgid;
   u32 pid;
   u32 uid;
   int cap;
   char comm[TASK_COMM_LEN];
#ifdef KERNEL_STACKS
   int kernel_stack_id;
#endif
#ifdef USER_STACKS
   int user_stack_id;
#endif
};

typedef char text64[64];

BPF_HASH(cgrouplabelsmap, u64, u32);        // DEFINE_CGROUPLABELSMAP  // EXTERNAL_MAP:cgrouplabelsmap,/sys/fs/bpf/cgrouplabelsmap,92
BPF_HASH(cgroupmetadatas, u64, u32);        // DEFINE_CGROUPMETADATAS  // EXTERNAL_MAP:cgroupmetadatas,/sys/fs/bpf/cgroupmetadatas,93
BPF_PERF_OUTPUT(events);

#if defined(USER_STACKS) || defined(KERNEL_STACKS)
BPF_STACK_TRACE(stacks, 2048);
#endif

int trace_cap_capable(struct pt_regs *ctx,
    struct user_namespace *targ_ns, int cap)
{
    u64 __pid_tgid = bpf_get_current_pid_tgid();
    u32 tgid = __pid_tgid >> 32;
    u32 pid = __pid_tgid;

    LABEL_FILTER
    NAMESPACE_FILTER
    PODNAME_FILTER
    FILTER1
    FILTER2
    FILTER3

    u32 uid = bpf_get_current_uid_gid();
    struct data_t data = {.tgid = tgid, .pid = pid, .uid = uid, .cap = cap};
#ifdef KERNEL_STACKS
    data.kernel_stack_id = stacks.get_stackid(ctx, 0);
#endif
#ifdef USER_STACKS
    data.user_stack_id = stacks.get_stackid(ctx, BPF_F_USER_STACK);
#endif
    bpf_get_current_comm(&data.comm, sizeof(data.comm));
    events.perf_submit(ctx, &data, sizeof(data));

    return 0;
};
"""
if args.pid:
    bpf_text = bpf_text.replace('FILTER1',
        'if (pid != %s) { return 0; }' % args.pid)
if args.kernel_stack:
    bpf_text = "#define KERNEL_STACKS\n" + bpf_text
if args.user_stack:
    bpf_text = "#define USER_STACKS\n" + bpf_text
bpf_text = bpf_text.replace('FILTER1', '')
bpf_text = bpf_text.replace('FILTER2', '')
bpf_text = bpf_text.replace('FILTER3',
    'if (pid == %s) { return 0; }' % os.getpid())

if args.label:
    label_kv = args.label.split("=", 2)
    if len(label_kv) != 2 or len(label_kv[0]) > 64 or len(label_kv[1]) > 64:
        exit("Bad key-value label selector: %s" % args.label)
    key_with_spaces = label_kv[0] + " " * (64 - len(label_kv[0]))
    value_len = len(label_kv[1])
    value_with_spaces = label_kv[1] + " " * (64 - len(label_kv[1]))
    bpf_text = bpf_text.replace('LABEL_FILTER',
        '''
        {
           u64 cgroupid = bpf_get_current_cgroup_id();
           DEBUG_PRINT && bpf_trace_printk("checking cgroupid: %%llu\\n", cgroupid);
           u32 *innermap = cgrouplabelsmap.lookup(&cgroupid);
           if (innermap == NULL) {
             DEBUG_PRINT && bpf_trace_printk("no innermap\\n");
             return 0;
           }

           text64 textkey = {%s};
           text64 *textvalue = bpf_map_lookup_elem_((uintptr_t)innermap, &textkey[0]);
           if (textvalue == NULL) {
             DEBUG_PRINT && bpf_trace_printk("no such label\\n");
             return 0;
           }
           if (%s) {
             DEBUG_PRINT && bpf_trace_printk("label with different value\\n");
             return 0;
           }
        }
        ''' % (
           "'" + "', '".join(list(key_with_spaces)) + "'",
           " || ".join([ "textvalue[0][%s] != '%s'" % (str(i), value_with_spaces[i]) for i in range(min(64, value_len+1))])
        ))
else:
    bpf_text = bpf_text.replace('LABEL_FILTER', '')

if args.namespace:
    if len(args.namespace) > 64:
        exit("Bad namespace selector")
    namespace_with_spaces = args.namespace + " " * (64 - len(args.namespace))
    bpf_text = bpf_text.replace('NAMESPACE_FILTER',
        '''
        {
           u64 cgroupid = bpf_get_current_cgroup_id();
           DEBUG_PRINT && bpf_trace_printk("checking cgroupid: %%llu\\n", cgroupid);
           u32 *innermap = cgroupmetadatas.lookup(&cgroupid);
           if (innermap == NULL) {
             DEBUG_PRINT && bpf_trace_printk("no innermap\\n");
             return 0;
           }

           u32 key = 0; /* namespace */
           text64 *textvalue = bpf_map_lookup_elem_((uintptr_t)innermap, &key);
           if (textvalue == NULL) {
             DEBUG_PRINT && bpf_trace_printk("no namespace defined\\n");
             return 0;
           }
           if (%s) {
             DEBUG_PRINT && bpf_trace_printk("namespace has different value\\n");
             return 0;
           }
        }
        ''' % (
           " || ".join([ "textvalue[0][%s] != '%s'" % (str(i), namespace_with_spaces[i]) for i in range(min(64, len(args.namespace)+1))])
        ))
else:
    bpf_text = bpf_text.replace('NAMESPACE_FILTER', '')

if args.podname:
    if len(args.podname) > 64:
        exit("Bad pod name selector")
    podname_with_spaces = args.podname + " " * (64 - len(args.podname))
    bpf_text = bpf_text.replace('PODNAME_FILTER',
        '''
        {
           u64 cgroupid = bpf_get_current_cgroup_id();
           DEBUG_PRINT && bpf_trace_printk("checking cgroupid: %%llu\\n", cgroupid);
           u32 *innermap = cgroupmetadatas.lookup(&cgroupid);
           if (innermap == NULL) {
             DEBUG_PRINT && bpf_trace_printk("no innermap\\n");
             return 0;
           }

           u32 key = 1; /* podname */
           text64 *textvalue = bpf_map_lookup_elem_((uintptr_t)innermap, &key);
           if (textvalue == NULL) {
             DEBUG_PRINT && bpf_trace_printk("no podname defined\\n");
             return 0;
           }
           if (%s) {
             DEBUG_PRINT && bpf_trace_printk("pod has different name\\n");
             return 0;
           }
        }
        ''' % (
           " || ".join([ "textvalue[0][%s] != '%s'" % (str(i), podname_with_spaces[i]) for i in range(min(64, len(args.podname)+1))])
        ))
else:
    bpf_text = bpf_text.replace('PODNAME_FILTER', '')

if not args.label:
    bpf_text = '\n'.join(x for x in bpf_text.split('\n')
        if 'DEFINE_CGROUPLABELSMAP' not in x)

if not args.namespace and not args.podname:
    bpf_text = '\n'.join(x for x in bpf_text.split('\n')
        if 'DEFINE_CGROUPMETADATAS' not in x)

if debug:
    print(bpf_text)

for x in bpf_text.split('\n'):
  if 'EXTERNAL_MAP' not in x:
    continue
  external_params = x.split('EXTERNAL_MAP:')[1].split(',')
  map_name = external_params[0]
  pin_path = external_params[1]
  external_fd = int(external_params[2])
  if not os.path.isfile(pin_path):
    exit(pin_path + ": No such file or directory")
  if not os.path.islink("/proc/self/fd/" + str(external_fd)):
    os.execvp("bpftool", ["bpftool", "map", "exec", "pinned", pin_path, "fd", str(external_fd), "cmd", "--"] + sys.argv)

# initialize BPF
b = BPF(text=bpf_text)

for x in bpf_text.split('\n'):
  if 'EXTERNAL_MAP' not in x:
    continue
  external_params = x.split('EXTERNAL_MAP:')[1].split(',')
  map_name = external_params[0]
  pin_path = external_params[1]
  external_fd = int(external_params[2])
  def set_cloexec(fd, cloexec=True):
    flags = fcntl.fcntl(fd, fcntl.F_GETFD)
    if cloexec:
      flags |= fcntl.FD_CLOEXEC
    else:
      flags &= ~fcntl.FD_CLOEXEC
    fcntl.fcntl(fd, fcntl.F_SETFD, flags)
  for i in range(3, 30):
    if not os.path.islink("/proc/self/fd/" + str(i)):
      continue
    set_cloexec(i, cloexec=False)
    ret = os.system("bpftool map show fd " + str(i) + " 2>/dev/null | grep -q 'name " + map_name + "'")
    set_cloexec(i, cloexec=True)
    if ret == 0:
      os.dup2(external_fd, i)
      break

b.attach_kprobe(event="ns_capable", fn_name="trace_cap_capable")

# header
print("%-9s %-6s %-6s %-6s %-16s %-4s %-20s" % (
    "TIME", "UID", "PID", "TID", "COMM", "CAP", "NAME"))
sys.stdout.flush()

def stack_id_err(stack_id):
    # -EFAULT in get_stackid normally means the stack-trace is not availible,
    # Such as getting kernel stack trace in userspace code
    return (stack_id < 0) and (stack_id != -errno.EFAULT)

def print_stack(bpf, stack_id, stack_type, tgid):
    if stack_id_err(stack_id):
        print("    [Missed %s Stack]" % stack_type)
        return
    stack = list(bpf.get_table("stacks").walk(stack_id))
    for addr in stack:
        print("        ", end="")
        print("%s" % (bpf.sym(addr, tgid, show_module=True, show_offset=True)))

# process event
def print_event(bpf, cpu, data, size):
    event = b["events"].event(data)

    if event.cap in capabilities:
        name = capabilities[event.cap]
    else:
        name = "?"
    print("%-9s %-6d %-6d %-6d %-16s %-4d %-20s" % (strftime("%H:%M:%S"),
        event.uid, event.pid, event.tgid, event.comm.decode('utf-8', 'replace'),
        event.cap, name))
    if args.kernel_stack:
        print_stack(bpf, event.kernel_stack_id, StackType.Kernel, -1)
    if args.user_stack:
        print_stack(bpf, event.user_stack_id, StackType.User, event.tgid)
    sys.stdout.flush()

# loop with callback to print_event
callback = partial(print_event, b)
b["events"].open_perf_buffer(callback)
while 1:
    try:
        b.perf_buffer_poll()
    except KeyboardInterrupt:
        exit()
