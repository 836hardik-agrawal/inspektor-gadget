// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package endpointcollection

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type endpointcollectionEndpointsKey struct {
	Key struct {
		Prefixlen uint32
		Data      [0]uint8
	}
	Ip uint32
}

// loadEndpointcollection returns the embedded CollectionSpec for endpointcollection.
func loadEndpointcollection() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_EndpointcollectionBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load endpointcollection: %w", err)
	}

	return spec, err
}

// loadEndpointcollectionObjects loads endpointcollection and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*endpointcollectionObjects
//	*endpointcollectionPrograms
//	*endpointcollectionMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadEndpointcollectionObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadEndpointcollection()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// endpointcollectionSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type endpointcollectionSpecs struct {
	endpointcollectionProgramSpecs
	endpointcollectionMapSpecs
}

// endpointcollectionSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type endpointcollectionProgramSpecs struct {
}

// endpointcollectionMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type endpointcollectionMapSpecs struct {
	Endpoints *ebpf.MapSpec `ebpf:"endpoints"`
}

// endpointcollectionObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadEndpointcollectionObjects or ebpf.CollectionSpec.LoadAndAssign.
type endpointcollectionObjects struct {
	endpointcollectionPrograms
	endpointcollectionMaps
}

func (o *endpointcollectionObjects) Close() error {
	return _EndpointcollectionClose(
		&o.endpointcollectionPrograms,
		&o.endpointcollectionMaps,
	)
}

// endpointcollectionMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadEndpointcollectionObjects or ebpf.CollectionSpec.LoadAndAssign.
type endpointcollectionMaps struct {
	Endpoints *ebpf.Map `ebpf:"endpoints"`
}

func (m *endpointcollectionMaps) Close() error {
	return _EndpointcollectionClose(
		m.Endpoints,
	)
}

// endpointcollectionPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadEndpointcollectionObjects or ebpf.CollectionSpec.LoadAndAssign.
type endpointcollectionPrograms struct {
}

func (p *endpointcollectionPrograms) Close() error {
	return _EndpointcollectionClose()
}

func _EndpointcollectionClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed endpointcollection_bpfel_x86.o
var _EndpointcollectionBytes []byte
