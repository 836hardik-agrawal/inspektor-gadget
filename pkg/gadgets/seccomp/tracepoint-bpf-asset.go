// Code generated by go-bindata.
// sources:
// pkg/gadgets/seccomp/tracepoint-bpf-asset.o
// DO NOT EDIT!

package seccomp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tracepointBpfAssetO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\x5d\x68\x23\xd7\x15\xc7\xff\x77\x24\xdb\x72\xbc\x4e\x9c\xb0\x69\x9d\x10\xc2\x2d\x69\x1d\xc9\xb5\x2d\x39\x9b\x6c\x4d\x36\x4a\xed\xf5\x6a\xb3\x6e\x1d\xaf\xb0\xe5\x66\x93\xb0\x8c\x65\x79\x2c\x0b\x4b\xa3\xe9\xcc\x68\x23\x67\x13\x6a\x4a\x02\x4b\x08\xc5\xd0\xb4\xe4\x21\xa5\xde\x36\xb4\x7a\x28\xc5\x10\xe8\xee\x43\xcb\xfa\x21\x0f\xa6\x7d\x31\xf4\xc5\xa5\x29\xb8\xed\xcb\xd2\x04\xea\x92\x7e\x6c\x9f\x5c\xee\xdc\x33\xd2\xe8\x5a\x72\x96\x92\x0b\x9a\x33\xbf\x73\xee\x39\xf7\x9c\x3b\x77\x66\xae\xe6\x3b\xa9\xe9\xf3\x1a\x63\xf0\x1b\xc3\x7f\xd0\xa0\x46\xdb\xfd\x62\xe3\x7c\x9c\x8e\xbd\x38\x81\x5b\xa4\xbf\x11\x91\xf2\xea\x5b\x77\x0e\xa5\x3c\x20\x79\x9b\xe4\x3e\xc9\x3d\x92\xbb\x24\x77\x48\x6e\x93\xbc\x49\x72\x8b\x64\x8d\xe4\x26\xc9\x77\x49\x6e\x90\xbc\x46\x72\x9d\x64\x95\xa4\x45\x72\x85\xe4\x02\xc9\x4b\x9e\x7c\x13\xc0\x63\x00\x6e\x75\xca\xbc\xd7\x1c\x29\x6f\x5d\x97\xb2\x8b\x01\x97\x0e\x0f\x0f\x6f\x68\x40\x8d\xfa\x87\x45\xbf\x57\x64\xa1\xb9\xb7\xc6\xbd\x38\xb7\x72\xd4\x3f\x04\x44\x14\xff\x71\xf2\x0f\x07\xfc\xf3\x5d\x00\x07\xf0\x0a\xc9\xaf\x74\xbd\x84\x4f\x19\x90\xbd\x2e\xe3\xbd\xc0\x00\x0d\xc0\x3c\x7b\xe1\x48\x3e\x7e\xbc\x3e\x8a\xd7\x17\x98\xf7\x6f\x93\xff\x3c\x8b\xc0\xf6\x78\x82\xb8\x13\x15\x8f\xcf\x12\x87\x61\x92\x1f\xf3\xf4\x93\x9e\xfe\x41\xc6\x90\x0b\xc4\xeb\xea\x04\x78\x4f\xf3\xf8\x63\x34\x7e\x24\x50\x77\xbd\x2e\x50\x5d\x24\xe7\xf1\x75\x39\xaf\x3f\x1d\x3b\xf4\xe7\xa7\x5f\xa9\x27\x11\x88\xd7\x3e\xce\x69\x8a\x93\x68\x1b\x27\x7a\x57\x71\x86\x65\x9c\xeb\x51\xaa\xf7\xab\x72\x7e\x7f\x42\x71\x34\x19\xa7\x5f\x59\xfc\x6f\x42\xce\xd3\x3c\xbe\x20\xd7\x39\xd9\xaf\x3e\xcc\x0f\x55\x7f\x7e\xac\xbf\x34\x74\xe0\x11\x39\xee\xcf\x1a\xf3\xdc\x6a\xdc\x5b\x8b\x24\x43\x52\xde\x08\xcb\x38\x22\x9e\x58\x1f\xed\xfa\xfb\xe3\x3d\x88\xfb\x3c\x7e\x81\xae\xf3\x83\x91\x7b\x3c\x9e\xef\xea\x42\x92\x89\x79\xd8\xa1\xf5\xd0\xe1\xd9\xd7\xae\xdf\xa4\x79\x09\xd5\xeb\x14\x7a\xa7\xef\x9f\x4c\xe6\xdd\x21\xd7\x19\x93\xec\xf7\xbb\xcf\x82\xd2\x9f\x98\xf2\xfa\x01\x49\x61\x13\xd7\xe7\x5f\x0c\x58\x27\xdd\x73\xe9\x69\x74\x77\x77\xe0\xc7\x1f\x33\xef\x9a\x8a\xb6\xc1\xe4\xef\xde\xae\x7a\x69\x9a\x46\xfe\x4c\x5e\x5a\x3c\xe4\xe5\x23\xdb\xa3\x52\x44\x84\xe1\xcb\x34\x54\xa4\xfe\x8c\xf2\x5a\xc8\x3f\xd0\xad\x8e\x33\xd4\x2f\x4c\x6b\x83\xf2\xeb\x15\x7e\x17\x69\xac\xb9\xe6\x3e\xde\xdd\xc8\x80\x13\x22\xad\xef\x76\x7a\xe3\x87\x4f\x02\xf8\x5e\x27\xd0\x43\x31\xbe\x4f\xe7\x22\xe6\x7b\x74\x2e\xf2\xf8\x39\x9d\x2f\x00\xf8\x80\xce\xc5\x1c\xfc\xa6\xb3\x39\x8f\xdf\x4a\xbe\xf7\x1e\xca\xe1\x4f\x64\xa7\xb9\x63\xc1\x7a\x7a\xa9\x1e\xe1\xfb\x17\xf2\xbb\x97\xfc\xfe\x46\x1c\x21\xfe\x6f\xa7\x27\xbd\x05\x71\x1f\x05\x11\x7e\xac\xab\xa1\x3f\x41\x7a\x51\x53\x67\x40\xdf\x17\xe8\x8f\x45\x6b\x59\xb7\xb3\xaf\xe8\xae\x9d\xcd\x19\x56\xb9\x60\xba\x7a\xd6\xce\x3b\xf0\x0e\xba\x5e\x39\xfd\x24\x8a\x65\x33\xcf\xbd\x43\xc5\x74\x0a\x79\xd3\x58\xe2\x05\xd3\x85\xae\x4f\xcc\xce\x4e\xbc\xa8\xcf\x4d\xbd\x94\xd2\x33\x2f\xa6\x53\xba\x8e\x9c\x5b\x85\xb0\x05\xa2\x79\xd1\x9d\x35\x27\x97\x2d\x16\x1d\x5d\x9c\xe9\x86\xe9\x1a\x36\x9a\x47\x8d\x37\x0c\xf1\x95\x72\xc9\x88\x67\x8b\x8b\x59\x33\x9e\x2f\xc7\x1d\x3b\x17\xcf\x17\xdc\x95\xca\xe2\x48\xae\x5c\x8a\xaf\x16\xcc\x2b\xe5\xe2\x6a\xbc\x60\x3a\x96\xb1\xea\x96\xed\xe1\x7c\x76\x29\x6f\xb8\x71\x6b\x35\x1f\x97\xa7\x4e\xdc\x31\x72\xb9\x72\xc9\x8a\x37\xe2\x0f\x2f\x5a\xcb\xc3\x59\xc7\x31\xdc\x91\x9c\x48\x91\xdf\x45\x8a\x51\xc7\xb5\x2b\x39\x97\xb7\x99\x23\x3e\x98\x73\xab\x31\x70\xce\x39\x75\xb4\x5c\xdd\x36\xf2\x0e\xf7\x0e\x49\x7e\xf5\xf5\x33\x41\xab\x9b\x75\x56\x75\x3a\x1f\x14\xc0\x93\x3c\xda\xca\x16\x13\x03\xe6\x0d\x57\xcf\x55\x6c\xdb\x30\x5d\x5d\x58\xa3\x31\x19\x4c\xd8\x2c\xbb\xbc\x68\xe8\xb6\x91\x5d\x8a\x0e\x88\xb1\x86\xb8\x53\x78\xd5\x28\x2f\x47\x9b\xf3\x88\x0d\xf1\xe8\x95\x72\x61\x69\x30\x96\x73\xab\xc3\xcf\x8a\x9c\x5f\x4e\x5c\xa6\x38\x85\x25\x9e\xe4\x0d\xfd\xe8\x65\xa9\xb6\x0d\xb7\x62\x9b\x7c\x36\x35\x71\x4e\xff\x66\x6a\x76\x26\x2a\xc6\x1e\x7e\xd6\x5d\x11\xa3\xe9\x05\x73\xb9\x3c\xe2\xb8\x59\xb7\xe2\xc4\xf8\x00\xcf\xcc\xe9\x93\x17\x9f\x4f\x4f\x64\x28\xe4\x32\x8f\x16\x1c\xbd\x3a\x76\x5a\x17\xb3\x9f\x75\x3d\xe7\x58\x8c\x5f\xad\x67\x1e\xac\x2a\x57\x2e\x95\xa2\xe2\x50\x4f\x5f\x40\xcc\xaf\xb3\x5c\x2e\xf2\x82\xa3\xdb\x15\x33\x27\x32\x2d\x97\x4a\x2f\x27\x2e\xf3\x64\x92\x3f\x6e\x3f\xce\x07\x06\xa4\x66\x54\x6a\x2a\x0d\xcd\x13\x52\x63\x36\x34\xa7\xa4\x26\xf7\xb8\x0c\x6c\xd8\x36\x4f\x1e\x99\x46\xd3\xb1\xec\x72\x75\xad\x9e\x0a\xb1\x3f\x85\x7c\x30\x36\x20\x67\xc2\x37\x34\x4a\x16\x01\xbf\x94\xe4\x09\xbf\xce\xd6\x03\x94\x4c\x57\x37\x1b\x57\x4a\x62\x30\x3c\x05\x1e\x7e\x96\x4c\xc7\x65\x5b\x32\xdd\xe6\x58\xcd\xa1\x64\x04\x91\xeb\x48\xc1\xac\x94\x28\x54\x65\x8c\x0f\xd2\x2a\xd7\x17\x0b\x6e\x29\x6b\x51\xe4\x52\xd6\xd2\x8b\xe5\xf2\x6a\xc5\xd2\x8d\xa2\x51\x8a\x0e\xd4\xef\x05\xcb\xb0\x75\x1a\x4b\x8e\x19\x28\x5b\x0d\x95\xe4\x33\xf3\xd3\xd3\xfe\x24\x78\x03\x9e\x7e\x92\xbf\x6a\xd8\x65\x9e\xe4\x89\x33\x0d\xed\x18\x1f\x5c\x2c\x66\xcd\xd5\xff\x27\x09\x11\x2e\xd6\x88\x25\xf2\x68\x8e\x45\x59\xd4\x7b\xf8\xa1\x2b\xd6\x52\xd6\x35\x3e\xb3\xbe\x21\x1e\x0c\x37\xc4\xcf\xa6\xcf\xeb\x33\x17\x53\x97\xa6\xe6\x32\x81\x61\x3f\xc7\x59\xa4\x15\x1e\x9c\x36\x4f\xbd\x24\x4a\x31\x6d\x9d\x9e\x64\x7c\x60\x00\xdd\xdd\xe9\x8c\x3e\x9b\x7a\x6e\x4e\x4f\x4f\xcc\x3e\x3f\x2a\x6f\xfd\x98\xe8\x37\x97\x9a\x14\xf7\xa1\x3e\x97\xca\xe8\xcf\x5f\x3c\x97\xd2\xcf\x4f\x4d\x67\x52\xb3\x47\x9d\x4e\xf9\x4e\xc1\xf5\xda\xba\xaa\x97\xe7\x5e\x9c\x9b\x9c\x98\x9e\x16\xb7\xf8\xfc\x4c\xe6\x32\x4f\xf2\xd1\xe6\x89\xff\xac\xfe\x62\x08\xb4\x08\x5c\x58\x12\xc1\x12\xd5\xc4\xe8\x19\xbc\x0e\x7f\xea\x96\x8c\x65\xb8\x6b\x96\x81\x55\x63\x4d\x17\x0b\x1b\x57\xb2\xc5\x8a\x21\x4f\x4b\xd9\xaa\x78\x24\xdb\x05\xc3\x81\xe8\xbc\x5c\xcc\xe6\x1d\x34\xbd\x8e\x8e\xce\x36\x72\x2b\x59\x1b\xd3\x53\x93\xa9\x99\xb9\x14\xc4\xc3\x2c\x35\xad\x7f\x2b\x35\x3b\x37\x75\x71\x06\xc5\x42\xce\x30\x1d\x11\xd9\x72\x70\xc5\xb0\x9d\x42\xd9\xf4\x76\x2d\x3c\xf0\xd6\x14\xbf\x8f\x42\xc0\x01\xed\xd8\xc4\xdb\xf7\x2a\x1a\xaf\xed\x6e\x7a\x9b\x0a\x5d\x92\x74\xef\x00\xf8\xb7\x38\x59\x60\x9e\x4d\xf0\x24\x03\x4e\xae\x30\xdc\x24\xce\x32\xe0\xb4\xc5\xb0\x43\xfc\x4b\x06\x3c\x5d\x65\xd8\x23\xf6\xdb\x7e\xc0\xde\x51\x65\x38\xf0\xe3\x33\xe0\x9e\xd7\x18\xee\x10\xf7\x6a\xc0\x89\x0b\xcc\xdb\x41\x06\xfd\x39\x6b\xb6\x27\x58\xb3\xff\x38\xf1\x94\x06\x74\xbf\xc1\x70\x41\xf1\xbf\xa4\xd8\x57\x88\x57\x34\xa0\xe3\x7d\x86\x6b\xc4\x3f\xd4\x80\x93\x35\xe6\xed\xf2\x7c\x7e\xac\xc6\xf0\x6e\x80\x07\x6a\x0c\x9b\x01\x7e\xaa\xc6\x50\x0b\xf0\x58\x8d\x61\x2b\xc0\xcf\xd5\x18\xb6\x03\xfc\x8d\x1a\xc3\x4e\x80\x67\x6b\x0c\x7b\xc4\x7f\xd7\x80\x73\x1f\x32\xdc\x56\xf2\x3f\x08\xd8\x7b\x3e\x64\xe8\xd7\x24\x3f\x13\x02\xba\x77\x18\x38\x71\x3a\x04\x3c\xb3\xc7\x10\x0d\x70\x6a\x8f\x61\x4c\xb1\x8f\x07\xb8\x67\x8f\x61\x21\x18\xef\x23\xe6\xcd\x8b\xe0\x1f\x85\x80\xa7\x3f\x61\xb0\x02\x9c\xfa\x84\x61\x5d\xb1\x5f\x0b\x70\xcf\x27\x0c\xb5\x60\xbc\x03\x86\x2d\xad\xb9\x9e\x9b\x8a\x7d\x47\xb1\xef\x12\xdf\x0e\x01\x0f\xf7\x69\xb8\x4d\x7c\x2a\x0c\x74\x9f\xd4\x70\x87\x78\x3e\x0c\xf4\xf6\x6b\x88\x84\x9a\xfd\xfb\x88\x57\xc3\xc0\x23\x8f\x68\x88\x12\x8b\x7f\x2a\xbd\x5c\xc3\xb8\xd2\xff\x02\xf1\x1f\x44\xfc\xa8\x86\x2a\xf1\x48\x07\xf0\x70\x42\xc3\x26\xf1\x5a\x07\xd0\x7d\x4e\xc3\x16\xf1\xdb\x1d\xc0\xa3\x69\x0d\x37\x89\x7f\xd1\x01\x84\x32\x1a\xb6\x03\x7c\x2a\xa3\x61\x87\xf8\xcf\xc2\x7e\x49\xc3\x6e\xc0\xbf\x37\xad\x61\xdf\xcf\xa7\x13\x18\x5a\xd0\xbc\xfb\x54\x70\xa2\x13\xe8\xb5\x34\xdc\x51\x58\x6c\x79\xbd\xfb\x4f\xec\xf6\xd7\x35\xf4\x05\xb8\x7f\x5d\x43\x3f\xf1\xba\xd8\x5d\xbf\xad\xe1\xf8\xf6\xba\xb7\x87\xfe\xc7\xa1\xaa\xff\xbd\x77\xd4\x30\x16\x6a\xd6\xff\x8e\xf4\x9b\x8a\xfe\x63\xd2\x1f\x28\xfa\xbf\x92\x5e\x6e\xd4\x1b\xed\x8f\xa4\xef\x57\xf4\x1f\x92\x7e\xaf\xc5\xc7\x9e\x10\x8e\x56\xf3\x3e\x80\xfb\xeb\xff\xba\x1a\xc3\xfc\xda\xd3\x87\x8f\xe8\x1f\xf2\xf4\x8d\x24\x4f\x92\x1c\x02\xf0\x40\x20\x7e\x94\x1c\x76\x49\x25\xd2\xe9\xa1\xd5\x15\xe4\x0b\x0a\x57\x15\xb6\x02\x75\x88\xff\x4f\xd7\x02\x2c\xec\x9b\x01\xee\xa6\x3c\xfc\xa6\xfc\x5f\xf4\x38\xad\xf0\x82\xc2\x96\xc2\xeb\x0a\x6f\x28\xbc\xa9\xf0\x96\xc2\xdb\x0a\xef\x2a\xbc\xaf\xf0\x81\xc2\xc1\x8f\x76\x82\xfb\x14\xe6\x0a\x27\x14\x1e\x57\x38\xad\xf0\x82\xc2\x96\xc2\xeb\x0a\x6f\x28\xbc\xa9\xf0\x96\xc2\xdb\x0a\xef\x2a\xbc\xaf\xf0\x81\xc2\xc1\x25\xeb\xd5\xaf\x30\x57\x38\xa1\xf0\xb8\xc2\x69\x85\x17\x14\xb6\x14\x5e\x57\x78\x43\xe1\x4d\x85\xb7\x14\xde\x56\x78\x57\xe1\x7d\x85\x0f\x14\x0e\xdc\x6a\xb2\x7e\x85\xb9\xc2\x09\x85\xc7\x15\x4e\x2b\xbc\xa0\xb0\xa5\xf0\xba\xc2\x1b\x0a\x6f\x2a\xbc\xa5\xf0\xb6\xc2\xbb\x0a\xef\x2b\x7c\xa0\x70\xf0\xb9\xe7\xf1\x88\x6b\x54\x5d\x8c\xd8\x46\x71\xe4\x6c\xe6\xfc\x88\x00\x6f\xfb\xd6\x62\xeb\x77\x37\x1f\x20\x44\xa0\xb6\x1f\x21\xfc\x2d\xa1\xbf\x4f\x6c\xf3\x25\x61\xc4\x71\x6d\x37\xbb\x88\x11\x67\xad\x24\xa4\xb2\xcb\xf4\x73\xad\xef\x42\xa7\xcf\x9e\x4d\xe8\x5f\x93\x62\xf4\x29\x92\x4f\x4a\xf9\xc4\x13\x24\x47\x49\x26\xf0\xb9\x34\xfa\xce\x56\xff\x56\xe6\xb7\xf1\x36\xfd\x95\xd7\x0a\x32\x9f\xe1\x1f\x55\x1c\x22\x4a\xbf\x93\xe4\xaf\xbc\xde\xb0\x12\x6e\xd8\x8f\x1b\xbf\xd2\xc6\xff\xb5\x70\xeb\xfe\xea\xeb\xaf\xd4\xc6\x7f\xbd\x8d\xbf\xca\x37\x5a\xc4\x14\xed\x0d\xea\xf8\xab\xc8\xf1\xe3\xf7\xb4\xf1\x7f\xba\x57\xca\xbe\xf0\xf1\xfe\xef\x35\x3f\x0a\xeb\x2d\x7d\xbf\x94\x63\xe4\x70\x82\xde\x83\x7e\x3a\xfe\xf7\xd7\x34\xe9\xd5\x76\xed\x01\x29\xfd\xeb\x18\xa1\x71\x7c\x7f\xff\x3b\xe1\x07\x6d\xfc\x77\xc8\x3f\x11\xf0\xef\x6c\xe1\xdf\xd5\xc6\xff\x0e\xf9\xef\x07\xfe\x5d\x75\xb5\xf0\x7f\xa7\xc5\xb5\x13\x6d\x4f\x7e\xbe\xc7\xa7\x8a\x5e\x9d\xbf\xff\x05\x00\x00\xff\xff\x9a\x85\x64\xc8\x10\x1b\x00\x00")

func tracepointBpfAssetOBytes() ([]byte, error) {
	return bindataRead(
		_tracepointBpfAssetO,
		"tracepoint-bpf-asset.o",
	)
}

func tracepointBpfAssetO() (*asset, error) {
	bytes, err := tracepointBpfAssetOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tracepoint-bpf-asset.o", size: 6928, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tracepoint-bpf-asset.o": tracepointBpfAssetO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tracepoint-bpf-asset.o": &bintree{tracepointBpfAssetO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

