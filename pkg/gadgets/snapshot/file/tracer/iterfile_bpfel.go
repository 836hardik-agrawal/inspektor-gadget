// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadIterFile returns the embedded CollectionSpec for iterFile.
func loadIterFile() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_IterFileBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load iterFile: %w", err)
	}

	return spec, err
}

// loadIterFileObjects loads iterFile and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*iterFileObjects
//	*iterFilePrograms
//	*iterFileMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadIterFileObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadIterFile()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// iterFileSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterFileSpecs struct {
	iterFileProgramSpecs
	iterFileMapSpecs
}

// iterFileSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterFileProgramSpecs struct {
	IgFileIt *ebpf.ProgramSpec `ebpf:"ig_file_it"`
}

// iterFileMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterFileMapSpecs struct {
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
}

// iterFileObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadIterFileObjects or ebpf.CollectionSpec.LoadAndAssign.
type iterFileObjects struct {
	iterFilePrograms
	iterFileMaps
}

func (o *iterFileObjects) Close() error {
	return _IterFileClose(
		&o.iterFilePrograms,
		&o.iterFileMaps,
	)
}

// iterFileMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadIterFileObjects or ebpf.CollectionSpec.LoadAndAssign.
type iterFileMaps struct {
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
}

func (m *iterFileMaps) Close() error {
	return _IterFileClose(
		m.GadgetMntnsFilterMap,
	)
}

// iterFilePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadIterFileObjects or ebpf.CollectionSpec.LoadAndAssign.
type iterFilePrograms struct {
	IgFileIt *ebpf.Program `ebpf:"ig_file_it"`
}

func (p *iterFilePrograms) Close() error {
	return _IterFileClose(
		p.IgFileIt,
	)
}

func _IterFileClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed iterfile_bpfel.o
var _IterFileBytes []byte
