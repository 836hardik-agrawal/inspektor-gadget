// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gadgettracermanager.proto

/*
Package gadgettracermanager is a generated protocol buffer package.

It is generated from these files:
	gadgettracermanager.proto

It has these top-level messages:
	Label
	AddTracerRequest
	RemoveTracerResponse
	ListContainersRequest
	ListContainersResponse
	AddContainerResponse
	RemoveContainerResponse
	ContainerSelector
	TracerID
	ContainerDefinition
	DumpStateRequest
	Dump
*/
package gadgettracermanager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Label struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Label) Reset()                    { *m = Label{} }
func (m *Label) String() string            { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()               {}
func (*Label) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Label) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Label) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type AddTracerRequest struct {
	Id       string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Selector *ContainerSelector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
}

func (m *AddTracerRequest) Reset()                    { *m = AddTracerRequest{} }
func (m *AddTracerRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTracerRequest) ProtoMessage()               {}
func (*AddTracerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddTracerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddTracerRequest) GetSelector() *ContainerSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

type RemoveTracerResponse struct {
	Debug string `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *RemoveTracerResponse) Reset()                    { *m = RemoveTracerResponse{} }
func (m *RemoveTracerResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveTracerResponse) ProtoMessage()               {}
func (*RemoveTracerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RemoveTracerResponse) GetDebug() string {
	if m != nil {
		return m.Debug
	}
	return ""
}

type ListContainersRequest struct {
	TracerId string `protobuf:"bytes,1,opt,name=tracer_id,json=tracerId" json:"tracer_id,omitempty"`
}

func (m *ListContainersRequest) Reset()                    { *m = ListContainersRequest{} }
func (m *ListContainersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContainersRequest) ProtoMessage()               {}
func (*ListContainersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListContainersRequest) GetTracerId() string {
	if m != nil {
		return m.TracerId
	}
	return ""
}

type ListContainersResponse struct {
	Removed   bool                 `protobuf:"varint,1,opt,name=removed" json:"removed,omitempty"`
	Container *ContainerDefinition `protobuf:"bytes,2,opt,name=container" json:"container,omitempty"`
}

func (m *ListContainersResponse) Reset()                    { *m = ListContainersResponse{} }
func (m *ListContainersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListContainersResponse) ProtoMessage()               {}
func (*ListContainersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListContainersResponse) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

func (m *ListContainersResponse) GetContainer() *ContainerDefinition {
	if m != nil {
		return m.Container
	}
	return nil
}

type AddContainerResponse struct {
	Debug string `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *AddContainerResponse) Reset()                    { *m = AddContainerResponse{} }
func (m *AddContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*AddContainerResponse) ProtoMessage()               {}
func (*AddContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddContainerResponse) GetDebug() string {
	if m != nil {
		return m.Debug
	}
	return ""
}

type RemoveContainerResponse struct {
	Debug string `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *RemoveContainerResponse) Reset()                    { *m = RemoveContainerResponse{} }
func (m *RemoveContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveContainerResponse) ProtoMessage()               {}
func (*RemoveContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RemoveContainerResponse) GetDebug() string {
	if m != nil {
		return m.Debug
	}
	return ""
}

type ContainerSelector struct {
	Namespace      string   `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Podname        string   `protobuf:"bytes,2,opt,name=podname" json:"podname,omitempty"`
	Labels         []*Label `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty"`
	ContainerIndex int32    `protobuf:"varint,4,opt,name=container_index,json=containerIndex" json:"container_index,omitempty"`
}

func (m *ContainerSelector) Reset()                    { *m = ContainerSelector{} }
func (m *ContainerSelector) String() string            { return proto.CompactTextString(m) }
func (*ContainerSelector) ProtoMessage()               {}
func (*ContainerSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ContainerSelector) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ContainerSelector) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *ContainerSelector) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ContainerSelector) GetContainerIndex() int32 {
	if m != nil {
		return m.ContainerIndex
	}
	return 0
}

type TracerID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TracerID) Reset()                    { *m = TracerID{} }
func (m *TracerID) String() string            { return proto.CompactTextString(m) }
func (*TracerID) ProtoMessage()               {}
func (*TracerID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TracerID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ContainerDefinition struct {
	ContainerId    string   `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	CgroupPath     string   `protobuf:"bytes,2,opt,name=cgroup_path,json=cgroupPath" json:"cgroup_path,omitempty"`
	CgroupId       uint64   `protobuf:"varint,3,opt,name=cgroup_id,json=cgroupId" json:"cgroup_id,omitempty"`
	Pid            uint64   `protobuf:"varint,4,opt,name=pid" json:"pid,omitempty"`
	Namespace      string   `protobuf:"bytes,5,opt,name=namespace" json:"namespace,omitempty"`
	Podname        string   `protobuf:"bytes,6,opt,name=podname" json:"podname,omitempty"`
	ContainerIndex int32    `protobuf:"varint,7,opt,name=container_index,json=containerIndex" json:"container_index,omitempty"`
	Labels         []*Label `protobuf:"bytes,8,rep,name=labels" json:"labels,omitempty"`
}

func (m *ContainerDefinition) Reset()                    { *m = ContainerDefinition{} }
func (m *ContainerDefinition) String() string            { return proto.CompactTextString(m) }
func (*ContainerDefinition) ProtoMessage()               {}
func (*ContainerDefinition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ContainerDefinition) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ContainerDefinition) GetCgroupPath() string {
	if m != nil {
		return m.CgroupPath
	}
	return ""
}

func (m *ContainerDefinition) GetCgroupId() uint64 {
	if m != nil {
		return m.CgroupId
	}
	return 0
}

func (m *ContainerDefinition) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ContainerDefinition) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ContainerDefinition) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *ContainerDefinition) GetContainerIndex() int32 {
	if m != nil {
		return m.ContainerIndex
	}
	return 0
}

func (m *ContainerDefinition) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

type DumpStateRequest struct {
}

func (m *DumpStateRequest) Reset()                    { *m = DumpStateRequest{} }
func (m *DumpStateRequest) String() string            { return proto.CompactTextString(m) }
func (*DumpStateRequest) ProtoMessage()               {}
func (*DumpStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Dump struct {
	State string `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *Dump) Reset()                    { *m = Dump{} }
func (m *Dump) String() string            { return proto.CompactTextString(m) }
func (*Dump) ProtoMessage()               {}
func (*Dump) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Dump) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterType((*Label)(nil), "gadgettracermanager.Label")
	proto.RegisterType((*AddTracerRequest)(nil), "gadgettracermanager.AddTracerRequest")
	proto.RegisterType((*RemoveTracerResponse)(nil), "gadgettracermanager.RemoveTracerResponse")
	proto.RegisterType((*ListContainersRequest)(nil), "gadgettracermanager.ListContainersRequest")
	proto.RegisterType((*ListContainersResponse)(nil), "gadgettracermanager.ListContainersResponse")
	proto.RegisterType((*AddContainerResponse)(nil), "gadgettracermanager.AddContainerResponse")
	proto.RegisterType((*RemoveContainerResponse)(nil), "gadgettracermanager.RemoveContainerResponse")
	proto.RegisterType((*ContainerSelector)(nil), "gadgettracermanager.ContainerSelector")
	proto.RegisterType((*TracerID)(nil), "gadgettracermanager.TracerID")
	proto.RegisterType((*ContainerDefinition)(nil), "gadgettracermanager.ContainerDefinition")
	proto.RegisterType((*DumpStateRequest)(nil), "gadgettracermanager.DumpStateRequest")
	proto.RegisterType((*Dump)(nil), "gadgettracermanager.Dump")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GadgetTracerManager service

type GadgetTracerManagerClient interface {
	AddTracer(ctx context.Context, in *AddTracerRequest, opts ...grpc.CallOption) (*TracerID, error)
	RemoveTracer(ctx context.Context, in *TracerID, opts ...grpc.CallOption) (*RemoveTracerResponse, error)
	ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (GadgetTracerManager_ListContainersClient, error)
	AddContainer(ctx context.Context, in *ContainerDefinition, opts ...grpc.CallOption) (*AddContainerResponse, error)
	RemoveContainer(ctx context.Context, in *ContainerDefinition, opts ...grpc.CallOption) (*RemoveContainerResponse, error)
	DumpState(ctx context.Context, in *DumpStateRequest, opts ...grpc.CallOption) (*Dump, error)
}

type gadgetTracerManagerClient struct {
	cc *grpc.ClientConn
}

func NewGadgetTracerManagerClient(cc *grpc.ClientConn) GadgetTracerManagerClient {
	return &gadgetTracerManagerClient{cc}
}

func (c *gadgetTracerManagerClient) AddTracer(ctx context.Context, in *AddTracerRequest, opts ...grpc.CallOption) (*TracerID, error) {
	out := new(TracerID)
	err := grpc.Invoke(ctx, "/gadgettracermanager.GadgetTracerManager/AddTracer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gadgetTracerManagerClient) RemoveTracer(ctx context.Context, in *TracerID, opts ...grpc.CallOption) (*RemoveTracerResponse, error) {
	out := new(RemoveTracerResponse)
	err := grpc.Invoke(ctx, "/gadgettracermanager.GadgetTracerManager/RemoveTracer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gadgetTracerManagerClient) ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (GadgetTracerManager_ListContainersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GadgetTracerManager_serviceDesc.Streams[0], c.cc, "/gadgettracermanager.GadgetTracerManager/ListContainers", opts...)
	if err != nil {
		return nil, err
	}
	x := &gadgetTracerManagerListContainersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GadgetTracerManager_ListContainersClient interface {
	Recv() (*ListContainersResponse, error)
	grpc.ClientStream
}

type gadgetTracerManagerListContainersClient struct {
	grpc.ClientStream
}

func (x *gadgetTracerManagerListContainersClient) Recv() (*ListContainersResponse, error) {
	m := new(ListContainersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gadgetTracerManagerClient) AddContainer(ctx context.Context, in *ContainerDefinition, opts ...grpc.CallOption) (*AddContainerResponse, error) {
	out := new(AddContainerResponse)
	err := grpc.Invoke(ctx, "/gadgettracermanager.GadgetTracerManager/AddContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gadgetTracerManagerClient) RemoveContainer(ctx context.Context, in *ContainerDefinition, opts ...grpc.CallOption) (*RemoveContainerResponse, error) {
	out := new(RemoveContainerResponse)
	err := grpc.Invoke(ctx, "/gadgettracermanager.GadgetTracerManager/RemoveContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gadgetTracerManagerClient) DumpState(ctx context.Context, in *DumpStateRequest, opts ...grpc.CallOption) (*Dump, error) {
	out := new(Dump)
	err := grpc.Invoke(ctx, "/gadgettracermanager.GadgetTracerManager/DumpState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GadgetTracerManager service

type GadgetTracerManagerServer interface {
	AddTracer(context.Context, *AddTracerRequest) (*TracerID, error)
	RemoveTracer(context.Context, *TracerID) (*RemoveTracerResponse, error)
	ListContainers(*ListContainersRequest, GadgetTracerManager_ListContainersServer) error
	AddContainer(context.Context, *ContainerDefinition) (*AddContainerResponse, error)
	RemoveContainer(context.Context, *ContainerDefinition) (*RemoveContainerResponse, error)
	DumpState(context.Context, *DumpStateRequest) (*Dump, error)
}

func RegisterGadgetTracerManagerServer(s *grpc.Server, srv GadgetTracerManagerServer) {
	s.RegisterService(&_GadgetTracerManager_serviceDesc, srv)
}

func _GadgetTracerManager_AddTracer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTracerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GadgetTracerManagerServer).AddTracer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gadgettracermanager.GadgetTracerManager/AddTracer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GadgetTracerManagerServer).AddTracer(ctx, req.(*AddTracerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GadgetTracerManager_RemoveTracer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GadgetTracerManagerServer).RemoveTracer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gadgettracermanager.GadgetTracerManager/RemoveTracer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GadgetTracerManagerServer).RemoveTracer(ctx, req.(*TracerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GadgetTracerManager_ListContainers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListContainersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GadgetTracerManagerServer).ListContainers(m, &gadgetTracerManagerListContainersServer{stream})
}

type GadgetTracerManager_ListContainersServer interface {
	Send(*ListContainersResponse) error
	grpc.ServerStream
}

type gadgetTracerManagerListContainersServer struct {
	grpc.ServerStream
}

func (x *gadgetTracerManagerListContainersServer) Send(m *ListContainersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GadgetTracerManager_AddContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GadgetTracerManagerServer).AddContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gadgettracermanager.GadgetTracerManager/AddContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GadgetTracerManagerServer).AddContainer(ctx, req.(*ContainerDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _GadgetTracerManager_RemoveContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GadgetTracerManagerServer).RemoveContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gadgettracermanager.GadgetTracerManager/RemoveContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GadgetTracerManagerServer).RemoveContainer(ctx, req.(*ContainerDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _GadgetTracerManager_DumpState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GadgetTracerManagerServer).DumpState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gadgettracermanager.GadgetTracerManager/DumpState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GadgetTracerManagerServer).DumpState(ctx, req.(*DumpStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GadgetTracerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gadgettracermanager.GadgetTracerManager",
	HandlerType: (*GadgetTracerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTracer",
			Handler:    _GadgetTracerManager_AddTracer_Handler,
		},
		{
			MethodName: "RemoveTracer",
			Handler:    _GadgetTracerManager_RemoveTracer_Handler,
		},
		{
			MethodName: "AddContainer",
			Handler:    _GadgetTracerManager_AddContainer_Handler,
		},
		{
			MethodName: "RemoveContainer",
			Handler:    _GadgetTracerManager_RemoveContainer_Handler,
		},
		{
			MethodName: "DumpState",
			Handler:    _GadgetTracerManager_DumpState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListContainers",
			Handler:       _GadgetTracerManager_ListContainers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gadgettracermanager.proto",
}

func init() { proto.RegisterFile("gadgettracermanager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x8d, 0xf3, 0xd3, 0xda, 0x93, 0x2a, 0xcd, 0xb7, 0xe9, 0x07, 0xae, 0x29, 0x22, 0xac, 0x04,
	0x04, 0xa8, 0x5a, 0x14, 0x78, 0x81, 0x42, 0x04, 0x8a, 0x54, 0x04, 0x72, 0xb8, 0xe2, 0x26, 0xda,
	0x64, 0xa7, 0xa9, 0xd5, 0xc4, 0x36, 0xf6, 0xa6, 0x02, 0xde, 0x85, 0x7b, 0x9e, 0x89, 0xa7, 0x41,
	0xeb, 0x5d, 0x3b, 0x3f, 0x6c, 0x42, 0xb8, 0xf3, 0x8c, 0xe7, 0x67, 0xcf, 0xd9, 0x73, 0x6c, 0x38,
	0x9e, 0x30, 0x3e, 0x41, 0x21, 0x12, 0x36, 0xc6, 0x64, 0xc6, 0x42, 0x36, 0xc1, 0xe4, 0x2c, 0x4e,
	0x22, 0x11, 0x91, 0x96, 0xe1, 0x15, 0x3d, 0x87, 0xda, 0x25, 0x1b, 0xe1, 0x94, 0x34, 0xa1, 0x72,
	0x83, 0xdf, 0x5c, 0xab, 0x6d, 0x75, 0x1c, 0x5f, 0x3e, 0x92, 0x23, 0xa8, 0xdd, 0xb2, 0xe9, 0x1c,
	0xdd, 0x72, 0x96, 0x53, 0x01, 0xbd, 0x82, 0xe6, 0x05, 0xe7, 0x9f, 0xb2, 0x21, 0x3e, 0x7e, 0x99,
	0x63, 0x2a, 0x48, 0x03, 0xca, 0x01, 0xd7, 0xad, 0xe5, 0x80, 0x93, 0xd7, 0x60, 0xa7, 0x38, 0xc5,
	0xb1, 0x88, 0x92, 0xac, 0xb9, 0xde, 0x7d, 0x7c, 0x66, 0x3a, 0xd7, 0x9b, 0x28, 0x14, 0x2c, 0x08,
	0x31, 0x19, 0xe8, 0x6a, 0xbf, 0xe8, 0xa3, 0xa7, 0x70, 0xe4, 0xe3, 0x2c, 0xba, 0xc5, 0x7c, 0x55,
	0x1a, 0x47, 0x61, 0x8a, 0xf2, 0x54, 0x1c, 0x47, 0xf3, 0x89, 0x5e, 0xa7, 0x02, 0xfa, 0x0a, 0xfe,
	0xbf, 0x0c, 0x52, 0x51, 0x0c, 0x4c, 0xf3, 0xa3, 0xdd, 0x03, 0x47, 0xed, 0x1c, 0x16, 0x27, 0xb4,
	0x55, 0xa2, 0xcf, 0xe9, 0x77, 0xb8, 0xb3, 0xde, 0xa5, 0xb7, 0xb8, 0xb0, 0x9f, 0x64, 0xdb, 0x55,
	0x93, 0xed, 0xe7, 0x21, 0x79, 0x0b, 0xce, 0x38, 0xaf, 0xd7, 0xe0, 0x3a, 0xdb, 0xc1, 0xf5, 0xf0,
	0x2a, 0x08, 0x03, 0x11, 0x44, 0xa1, 0xbf, 0x68, 0x95, 0xf8, 0x2e, 0x38, 0x2f, 0x8a, 0xfe, 0x82,
	0xef, 0x1c, 0xee, 0x2a, 0x36, 0x76, 0x6d, 0xf8, 0x69, 0xc1, 0x7f, 0x7f, 0xd0, 0x4b, 0x4e, 0xc0,
	0x09, 0xd9, 0x0c, 0xd3, 0x98, 0x8d, 0x51, 0xd7, 0x2f, 0x12, 0x12, 0x74, 0x1c, 0x71, 0x19, 0xeb,
	0x2b, 0xcf, 0x43, 0xd2, 0x85, 0xbd, 0xa9, 0x54, 0x49, 0xea, 0x56, 0xda, 0x95, 0x4e, 0xbd, 0xeb,
	0x19, 0x11, 0x67, 0x42, 0xf2, 0x75, 0x25, 0x79, 0x02, 0x87, 0x05, 0xda, 0x61, 0x10, 0x72, 0xfc,
	0xea, 0x56, 0xdb, 0x56, 0xa7, 0xe6, 0x37, 0x8a, 0x74, 0x5f, 0x66, 0xa9, 0x07, 0xb6, 0xba, 0xe3,
	0x7e, 0x6f, 0x5d, 0x49, 0xf4, 0x47, 0x19, 0x5a, 0x06, 0x22, 0xc9, 0x43, 0x38, 0x58, 0x1a, 0x9e,
	0x77, 0xd4, 0x17, 0x93, 0x39, 0x79, 0x00, 0xf5, 0xf1, 0x24, 0x89, 0xe6, 0xf1, 0x30, 0x66, 0xe2,
	0x5a, 0x23, 0x02, 0x95, 0xfa, 0xc8, 0xc4, 0xb5, 0x94, 0x86, 0x2e, 0x08, 0xb8, 0x5b, 0x69, 0x5b,
	0x9d, 0xaa, 0x6f, 0xab, 0x44, 0x9f, 0x4b, 0x3b, 0xc4, 0x01, 0xcf, 0x4e, 0x5c, 0xf5, 0xe5, 0xe3,
	0x2a, 0x77, 0xb5, 0x2d, 0xdc, 0xed, 0xad, 0x72, 0x67, 0xe0, 0x61, 0xdf, 0xc4, 0xc3, 0x12, 0xc9,
	0xf6, 0xae, 0x24, 0x53, 0x02, 0xcd, 0xde, 0x7c, 0x16, 0x0f, 0x04, 0x13, 0xa8, 0x25, 0x4f, 0x4f,
	0xa0, 0x2a, 0x73, 0x52, 0x18, 0xa9, 0xcc, 0xe7, 0xc2, 0xc8, 0x82, 0xee, 0xaf, 0x2a, 0xb4, 0xde,
	0x65, 0x73, 0x15, 0xe9, 0xef, 0xd5, 0x5c, 0x32, 0x00, 0xa7, 0xf0, 0x35, 0x79, 0x64, 0x5c, 0xbd,
	0xee, 0x7b, 0xef, 0xbe, 0xb1, 0x2c, 0xbf, 0x4c, 0x5a, 0x22, 0x9f, 0xe1, 0x60, 0xd9, 0xc4, 0x64,
	0x7b, 0x83, 0xf7, 0xd4, 0xf8, 0xda, 0xf4, 0x19, 0xa0, 0x25, 0x32, 0x83, 0xc6, 0xaa, 0x79, 0xc9,
	0x33, 0x33, 0x61, 0xa6, 0xef, 0x82, 0xf7, 0x7c, 0xa7, 0xda, 0x7c, 0xd9, 0x0b, 0x8b, 0x20, 0x1c,
	0x2c, 0xfb, 0x95, 0xec, 0x6c, 0xfa, 0x0d, 0xa8, 0x4c, 0xe6, 0xa7, 0x25, 0x72, 0x03, 0x87, 0x6b,
	0x46, 0xff, 0x87, 0x4d, 0xa7, 0x5b, 0xf8, 0x33, 0x2d, 0xfb, 0x00, 0x4e, 0xa1, 0x9e, 0x0d, 0x77,
	0xbe, 0xae, 0x2e, 0xef, 0x78, 0x63, 0x19, 0x2d, 0x8d, 0xf6, 0xb2, 0x3f, 0xcd, 0xcb, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x1f, 0xd0, 0x10, 0x47, 0x86, 0x06, 0x00, 0x00,
}
